<?xml version="1.0" encoding="UTF-8"?>
<xs:schema attributeFormDefault="unqualified"
	elementFormDefault="qualified"
	xmlns:xs="http://www.w3.org/2001/XMLSchema">
	<xs:annotation>
		<xs:appinfo>
			<author>Rafael Gu</author>
			<filename>operators.xsd</filename>
			<describe>
				Some operations are defined here. Included by other schema, no instance documents
				follow this.
			</describe>
		</xs:appinfo>
	</xs:annotation>
	<!-- ****************************************************************************************************-->
	<xs:include schemaLocation="types.xsd"/>
	<!-- ****************************************************************************************************-->
	<xs:complexType name="data_block">
		<xs:choice maxOccurs="unbounded">
			<xs:element name="v_object" type="v_object"/>
			<xs:element name="v_b_1" type="v_b_1"/>
			<xs:element name="v_ub_1" type="v_ub_1"/>
			<xs:element name="v_b_2" type="v_b_2"/>
			<xs:element name="v_ub_2" type="v_ub_2"/>
			<xs:element name="v_b_4" type="v_b_4"/>
			<xs:element name="v_ub_4" type="v_ub_4"/>
			<xs:element name="v_b_8" type="v_b_8"/>
			<xs:element name="v_ub_8" type="v_ub_8"/>
			<xs:element name="v_fb_4" type="v_fb_4"/>
			<xs:element name="v_fb_8" type="v_fb_8"/>
			<xs:element name="v_string" type="v_string"/>
			<xs:element name="v_group" type="v_group"/>
		</xs:choice>
	</xs:complexType>
	<!-- ****************************************************************************************************-->
	<xs:complexType name="solid_variable">
		<xs:attribute name="name" type="reference_name" use="required"/>
	</xs:complexType>
	<xs:complexType name="group_variable">
		<xs:attribute name="group_name" type="reference_name" use="required"/>
		<xs:attribute name="field_name" type="reference_name" use="optional"/>
		<xs:attribute default="unbounded" name="index">
			<xs:simpleType>
				<xs:union memberTypes="unbounded reference_name"/>
			</xs:simpleType>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="network_variable">
		<xs:attribute name="group_name" type="reference_name" use="optional"/>
		<xs:attribute name="field_name" type="reference_name" use="required"/>
		<xs:attribute default="unbounded" name="index">
			<xs:simpleType>
				<xs:union memberTypes="unbounded reference_name"/>
			</xs:simpleType>
		</xs:attribute>
	</xs:complexType>
	<xs:group name="parmeter_variable">
		<xs:choice>
			<xs:element name="solid_variable" type="solid_variable"/>
			<xs:element name="group_variable" type="group_variable"/>
			<xs:element name="network_variable" type="network_variable"/>
		</xs:choice>
	</xs:group>
	<!-- ****************************************************************************************************-->
	<xs:complexType name="empty">
		<xs:complexContent>
			<xs:extension base="base">
				<xs:sequence>
					<xs:group ref="parmeter_variable"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="unitary_calculate">
		<xs:complexContent>
			<xs:extension base="base">
				<xs:sequence>
					<xs:group maxOccurs="2" minOccurs="2" ref="parmeter_variable">
						<xs:annotation>
							<xs:documentation>First = Second.</xs:documentation>
						</xs:annotation>
					</xs:group>
				</xs:sequence>
				<xs:attribute default="eql" name="operator">
					<xs:simpleType>
						<xs:restriction base="xs:string">
							<xs:enumeration value="eql"/>
							<xs:enumeration value="neg"/>
							<xs:enumeration value="not"/>
							<xs:enumeration value="obv"/>
						</xs:restriction>
					</xs:simpleType>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="duality_calculate">
		<xs:complexContent>
			<xs:extension base="base">
				<xs:sequence>
					<xs:group maxOccurs="3" minOccurs="3" ref="parmeter_variable">
						<xs:annotation>
							<xs:documentation>First + Second = Third.</xs:documentation>
						</xs:annotation>
					</xs:group>
				</xs:sequence>
				<xs:attribute name="operator" use="required">
					<xs:simpleType>
						<xs:restriction base="xs:string">
							<xs:enumeration value="add"/>
							<xs:enumeration value="sub"/>
							<xs:enumeration value="mul"/>
							<xs:enumeration value="div"/>
							<xs:enumeration value="mod"/>
							<xs:enumeration value="and"/>
							<xs:enumeration value="or"/>
							<xs:enumeration value="xor"/>
						</xs:restriction>
					</xs:simpleType>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- ****************************************************************************************************-->
	<xs:complexType name="config_group">
		<xs:complexContent>
			<xs:extension base="base">
				<xs:sequence>
					<xs:element name="group_varialbe" type="group_variable"/>
					<xs:element name="solid_variable" type="solid_variable"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- ****************************************************************************************************-->
	<xs:complexType name="condition_unitary">
		<xs:sequence>
			<xs:group maxOccurs="1" minOccurs="1" ref="parmeter_variable">
				<xs:annotation>
					<xs:documentation>First: The value.</xs:documentation>
				</xs:annotation>
			</xs:group>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="condition_duality">
		<xs:sequence>
			<xs:group maxOccurs="2" minOccurs="2" ref="parmeter_variable">
				<xs:annotation>
					<xs:documentation>First: Left.
						Second: Right.</xs:documentation>
				</xs:annotation>
			</xs:group>
		</xs:sequence>
		<xs:attribute default="eq" name="calculate">
			<xs:simpleType>
				<xs:restriction base="xs:string">
					<xs:enumeration value="eq"/>
					<xs:enumeration value="gl"/>
					<xs:enumeration value="gt"/>
					<xs:enumeration value="ge"/>
					<xs:enumeration value="ls"/>
					<xs:enumeration value="le"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="expression_unitary">
		<xs:sequence>
			<xs:group ref="expression"/>
		</xs:sequence>
		<xs:attribute fixed="not" name="relation">
			<xs:simpleType>
				<xs:restriction base="xs:string">
					<xs:enumeration value="not"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="expression_duality">
		<xs:sequence>
			<xs:group maxOccurs="2" minOccurs="2" ref="expression"/>
		</xs:sequence>
		<xs:attribute default="and" name="relation">
			<xs:simpleType>
				<xs:restriction base="xs:string">
					<xs:enumeration value="and"/>
					<xs:enumeration value="or"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:complexType>
	<xs:group name="expression">
		<xs:choice>
			<xs:element name="expression_unitary" type="expression_unitary"/>
			<xs:element name="expression_duality" type="expression_duality"/>
			<xs:element name="condition_unitary" type="condition_unitary"/>
			<xs:element name="condition_duality" type="condition_duality"/>
		</xs:choice>
	</xs:group>
	<xs:group name="action">
		<xs:sequence>
			<xs:group ref="expression"/>
			<xs:element name="program" type="program"/>
		</xs:sequence>
	</xs:group>
	<xs:complexType name="if">
		<xs:complexContent>
			<xs:extension base="base">
				<xs:sequence>
					<xs:element minOccurs="0" name="data_block" type="data_block"/>
					<xs:group maxOccurs="unbounded" ref="action"/>
					<xs:element minOccurs="0" name="program" type="program"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="while">
		<xs:complexContent>
			<xs:extension base="base">
				<xs:sequence>
					<xs:element minOccurs="0" name="data_block" type="data_block"/>
					<xs:group ref="expression"/>
					<xs:element name="process_block" type="process_block"/>
				</xs:sequence>
				<xs:attribute default="head" name="position">
					<xs:simpleType>
						<xs:restriction base="xs:string">
							<xs:enumeration value="head"/>
							<xs:enumeration value="foot"/>
						</xs:restriction>
					</xs:simpleType>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="continue">
		<xs:annotation>
			<xs:documentation>Stop special operator, like while, make no sense for other operator.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="base"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="break">
		<xs:annotation>
			<xs:documentation>Stop the nearest operator, like while, make no sense for other operator.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="base"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="block">
		<xs:annotation>
			<xs:documentation>Stop the top operator.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="base"/>
		</xs:complexContent>
	</xs:complexType>
	<!-- ****************************************************************************************************-->
	<xs:complexType name="send">
		<xs:complexContent>
			<xs:extension base="base">
				<xs:sequence>
					<xs:element maxOccurs="unbounded" minOccurs="0" name="field_variable">
						<xs:complexType>
							<xs:sequence>
								<xs:group ref="parmeter_variable"/>
							</xs:sequence>
							<xs:attribute name="field_name" type="reference_name" use="required"/>
						</xs:complexType>
					</xs:element>
					<xs:group maxOccurs="2" minOccurs="0" ref="parmeter_variable">
						<xs:annotation>
							<xs:documentation>
								If there is none, it&apos;s the current Interface or current remote ip and port. If
								there is only one element, it&apos;s TCP Interface. If thiere are two element,
								First: Ip. Second: Port.
							</xs:documentation>
						</xs:annotation>
					</xs:group>
				</xs:sequence>
				<xs:attribute name="protocol" type="reference_name" use="required"/>
				<xs:attribute name="pdu" type="reference_name" use="required"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="forward">
		<xs:complexContent>
			<xs:extension base="base">
				<xs:sequence>
					<xs:group maxOccurs="2" minOccurs="0" ref="parmeter_variable">
						<xs:annotation>
							<xs:documentation>
								If there is none, it&apos;s the current Interface. If there is only one element, it&apos;s
								TCP Interface. If thiere are two element, First: Ip. Second: Port.
							</xs:documentation>
						</xs:annotation>
					</xs:group>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- ****************************************************************************************************-->
	<xs:complexType name="get_address">
		<xs:complexContent>
			<xs:extension base="base">
				<xs:sequence>
					<xs:group maxOccurs="2" minOccurs="2" ref="parmeter_variable">
						<xs:annotation>
							<xs:documentation>First: IP.
								Second: Port.</xs:documentation>
						</xs:annotation>
					</xs:group>
				</xs:sequence>
				<xs:attribute default="remote" name="type">
					<xs:simpleType>
						<xs:restriction base="xs:string">
							<xs:enumeration value="remote"/>
							<xs:enumeration value="local"/>
						</xs:restriction>
					</xs:simpleType>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- ****************************************************************************************************-->
	<xs:complexType name="register">
		<xs:complexContent>
			<xs:extension base="base">
				<xs:sequence>
					<xs:group maxOccurs="3" minOccurs="2" ref="parmeter_variable">
						<xs:annotation>
							<xs:documentation>
								First: Category, must be string. Second: Key, must be string. Third: Value.If is&apos;s
								not exist, register the current interface.
							</xs:documentation>
						</xs:annotation>
					</xs:group>
				</xs:sequence>
				<xs:attribute default="false" name="recovered" type="xs:boolean"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="unregister">
		<xs:annotation>
			<xs:documentation/>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="base">
				<xs:sequence>
					<xs:group maxOccurs="2" minOccurs="2" ref="parmeter_variable">
						<xs:annotation>
							<xs:documentation>First: Category, must be string.
								Second: Key, must be string.</xs:documentation>
						</xs:annotation>
					</xs:group>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="search">
		<xs:complexContent>
			<xs:extension base="base">
				<xs:sequence>
					<xs:group maxOccurs="3" minOccurs="3" ref="parmeter_variable">
						<xs:annotation>
							<xs:documentation>
								First: Category, must be string. Second: Key, must be string. Third: Value.
							</xs:documentation>
						</xs:annotation>
					</xs:group>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- ****************************************************************************************************-->
	<xs:complexType name="get_usage">
		<xs:complexContent>
			<xs:extension base="base">
				<xs:sequence>
					<xs:group maxOccurs="1" minOccurs="1" ref="parmeter_variable">
						<xs:annotation>
							<xs:documentation>First: Return usage</xs:documentation>
						</xs:annotation>
					</xs:group>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- ****************************************************************************************************-->
	<xs:complexType name="network_wake_up">
		<xs:complexContent>
			<xs:extension base="base">
				<xs:sequence>
					<xs:group maxOccurs="2" minOccurs="2" ref="parmeter_variable">
						<xs:annotation>
							<xs:documentation>
								First: interface name, must be string. Second: return create result, maybe success,
								maybe failure.
							</xs:documentation>
						</xs:annotation>
					</xs:group>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="network_sleep">
		<xs:complexContent>
			<xs:extension base="base">
				<xs:sequence>
					<xs:group maxOccurs="2" minOccurs="2" ref="parmeter_variable">
						<xs:annotation>
							<xs:documentation>
								First: interface name, must be string. Second: return destory result, maybe success,
								maybe failure.
							</xs:documentation>
						</xs:annotation>
					</xs:group>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- ****************************************************************************************************-->
	<xs:complexType name="read_file">
		<xs:complexContent>
			<xs:extension base="base">
				<xs:sequence>
					<xs:group maxOccurs="3" minOccurs="3" ref="parmeter_variable">
						<xs:annotation>
							<xs:documentation>
								First: File Folder Second: File Name Third: File content, null_v if failure
							</xs:documentation>
						</xs:annotation>
					</xs:group>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="save_file">
		<xs:complexContent>
			<xs:extension base="base">
				<xs:sequence>
					<xs:group maxOccurs="4" minOccurs="4" ref="parmeter_variable">
						<xs:annotation>
							<xs:documentation>
								First: File Folder Second: File Name Third: File content Forth: Result, true_v or
								false_v
							</xs:documentation>
						</xs:annotation>
					</xs:group>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="delete_file">
		<xs:complexContent>
			<xs:extension base="base">
				<xs:sequence>
					<xs:group maxOccurs="2" minOccurs="2" ref="parmeter_variable">
						<xs:annotation>
							<xs:documentation>First: File Folder or File name
								Second: Result, true_v or false_v</xs:documentation>
						</xs:annotation>
					</xs:group>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- ****************************************************************************************************-->
	<xs:complexType name="use_module">
		<xs:complexContent>
			<xs:extension base="base">
				<xs:sequence>
					<xs:element minOccurs="0" name="parameter_in">
						<xs:complexType>
							<xs:group maxOccurs="unbounded" ref="parmeter_variable"/>
						</xs:complexType>
					</xs:element>
					<xs:element maxOccurs="unbounded" minOccurs="0" name="parameter_out">
						<xs:complexType>
							<xs:sequence>
								<xs:group ref="parmeter_variable"/>
							</xs:sequence>
							<xs:attribute name="field_name" type="reference_name" use="required"/>
						</xs:complexType>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="module" type="reference_name" use="required"/>
				<xs:attribute name="interface" type="reference_name" use="required"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- ****************************************************************************************************-->
	<xs:complexType name="split">
		<xs:complexContent>
			<xs:extension base="base">
				<xs:sequence>
					<xs:group maxOccurs="2" minOccurs="2" ref="parmeter_variable">
						<xs:annotation>
							<xs:documentation>First: Environment folder
								Second: Result, true_v or false_v</xs:documentation>
						</xs:annotation>
					</xs:group>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- ****************************************************************************************************-->
	<xs:complexType name="die">
		<xs:annotation>
			<xs:documentation>ComEgg die</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="base"/>
		</xs:complexContent>
	</xs:complexType>
	<!-- ****************************************************************************************************-->
	<xs:complexType name="process_block">
		<xs:choice maxOccurs="unbounded">
			<xs:element name="empty" type="empty"/>
			<xs:element name="unitary_calculate" type="unitary_calculate"/>
			<xs:element name="duality_calculate" type="duality_calculate"/>
			<xs:element name="config_group" type="config_group"/>
			<xs:element name="if" type="if"/>
			<xs:element name="while" type="while"/>
			<xs:element name="continue" type="continue"/>
			<xs:element name="block" type="block"/>
			<xs:element name="break" type="break"/>
			<xs:element name="send" type="send"/>
			<xs:element name="forward" type="forward"/>
			<xs:element name="get_address" type="get_address"/>
			<xs:element name="register" type="register"/>
			<xs:element name="unregister" type="unregister"/>
			<xs:element name="search" type="search"/>
			<xs:element name="get_usage" type="get_usage"/>
			<xs:element name="network_wake_up" type="network_wake_up"/>
			<xs:element name="network_sleep" type="network_sleep"/>
			<xs:element name="read_file" type="read_file"/>
			<xs:element name="save_file" type="save_file"/>
			<xs:element name="delete_file" type="delete_file"/>
			<xs:element name="use_module" type="use_module"/>
			<xs:element name="split" type="split"/>
			<xs:element name="die" type="die"/>
			<xs:element name="program" type="program"/>
		</xs:choice>
	</xs:complexType>
	<xs:complexType name="program">
		<xs:sequence>
			<xs:element minOccurs="0" name="data_block" type="data_block"/>
			<xs:element name="process_block" type="process_block"/>
		</xs:sequence>
	</xs:complexType>
</xs:schema>
