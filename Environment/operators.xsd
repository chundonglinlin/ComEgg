<?xml version="1.0" encoding="UTF-8"?>
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified"
           xmlns:xs="http://www.w3.org/2001/XMLSchema">
    <xs:annotation>
        <xs:appinfo>
            <author>Rafael Gu</author>
            <filename>operators.xsd</filename>
            <describe>
                Some operations are defined here.
                Included by other schema, no instance documents follow this.
            </describe>
        </xs:appinfo>
    </xs:annotation>
    <!-- ****************************************************************************************************-->
    <xs:include schemaLocation="types.xsd"/>
    <!-- ****************************************************************************************************-->
    <xs:complexType name="dataBlock">
        <xs:choice maxOccurs="unbounded">
            <xs:element name="vObject" type="vObject"/>
            <xs:element name="vB1" type="vB1"/>
            <xs:element name="vUb1" type="vUb1"/>
            <xs:element name="vB2" type="vB2"/>
            <xs:element name="vUb2" type="vUb2"/>
            <xs:element name="vB4" type="vB4"/>
            <xs:element name="vUb4" type="vUb4"/>
            <xs:element name="vB8" type="vB8"/>
            <xs:element name="vUb8" type="vUb8"/>
            <xs:element name="vFb4" type="vFb4"/>
            <xs:element name="vFb8" type="vFb8"/>
            <xs:element name="vString" type="vString"/>
            <xs:element name="vGroup" type="vGroup"/>
        </xs:choice>
    </xs:complexType>
    <!-- ****************************************************************************************************-->
    <xs:complexType name="solidVariable">
        <xs:attribute name="name" type="referenceName" use="required"/>
    </xs:complexType>
    <xs:complexType name="groupVariable">
        <xs:attribute name="groupName" type="referenceName" use="required"/>
        <xs:attribute name="fieldName" type="referenceName" use="optional"/>
        <xs:attribute default="unbounded" name="index">
            <xs:simpleType>
                <xs:union memberTypes="unbounded referenceName"/>
            </xs:simpleType>
        </xs:attribute>
    </xs:complexType>
    <xs:complexType name="networkVariable">
        <xs:attribute name="groupName" type="referenceName" use="optional"/>
        <xs:attribute name="fieldName" type="referenceName" use="required"/>
        <xs:attribute default="unbounded" name="index">
            <xs:simpleType>
                <xs:union memberTypes="unbounded referenceName"/>
            </xs:simpleType>
        </xs:attribute>
    </xs:complexType>
    <xs:group name="parameterVariable">
        <xs:choice>
            <xs:element name="solidVariable" type="solidVariable"/>
            <xs:element name="groupVariable" type="groupVariable"/>
            <xs:element name="networkVariable" type="networkVariable"/>
        </xs:choice>
    </xs:group>
    <!-- ****************************************************************************************************-->
    <xs:complexType name="empty">
        <xs:complexContent>
            <xs:extension base="base">
                <xs:sequence>
                    <xs:group ref="parameterVariable"/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:complexType name="unitaryCalculate">
        <xs:complexContent>
            <xs:extension base="base">
                <xs:sequence>
                    <xs:group maxOccurs="2" minOccurs="2"
                              ref="parameterVariable">
                        <xs:annotation>
                            <xs:documentation>
                                First = Second.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:group>
                </xs:sequence>
                <xs:attribute default="eql" name="operator">
                    <xs:simpleType>
                        <xs:restriction base="xs:string">
                            <xs:enumeration value="eql"/>
                            <xs:enumeration value="neg"/>
                            <xs:enumeration value="not"/>
                            <xs:enumeration value="obv"/>
                        </xs:restriction>
                    </xs:simpleType>
                </xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:complexType name="dualityCalculate">
        <xs:complexContent>
            <xs:extension base="base">
                <xs:sequence>
                    <xs:group maxOccurs="3" minOccurs="3"
                              ref="parameterVariable">
                        <xs:annotation>
                            <xs:documentation>
                                First + Second = Third.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:group>
                </xs:sequence>
                <xs:attribute name="operator" use="required">
                    <xs:simpleType>
                        <xs:restriction base="xs:string">
                            <xs:enumeration value="add"/>
                            <xs:enumeration value="sub"/>
                            <xs:enumeration value="mul"/>
                            <xs:enumeration value="div"/>
                            <xs:enumeration value="mod"/>
                            <xs:enumeration value="and"/>
                            <xs:enumeration value="or"/>
                            <xs:enumeration value="xor"/>
                        </xs:restriction>
                    </xs:simpleType>
                </xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <!-- ****************************************************************************************************-->
    <xs:complexType name="configGroup">
        <xs:complexContent>
            <xs:extension base="base">
                <xs:sequence>
                    <xs:element name="groupVariable" type="groupVariable"/>
                    <xs:element name="solidVariable" type="solidVariable"/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <!-- ****************************************************************************************************-->
    <xs:complexType name="conditionUnitary">
        <xs:sequence>
            <xs:group maxOccurs="1" minOccurs="1" ref="parameterVariable">
                <xs:annotation>
                    <xs:documentation>
                        First: The value.
                    </xs:documentation>
                </xs:annotation>
            </xs:group>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="conditionDuality">
        <xs:sequence>
            <xs:group maxOccurs="2" minOccurs="2" ref="parameterVariable">
                <xs:annotation>
                    <xs:documentation>
                        First: Left.
                        Second: Right.
                    </xs:documentation>
                </xs:annotation>
            </xs:group>
        </xs:sequence>
        <xs:attribute default="eq" name="calculate">
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="eq"/>
                    <xs:enumeration value="gl"/>
                    <xs:enumeration value="gt"/>
                    <xs:enumeration value="ge"/>
                    <xs:enumeration value="ls"/>
                    <xs:enumeration value="le"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:complexType>
    <xs:complexType name="expressionUnitary">
        <xs:sequence>
            <xs:group ref="expression"/>
        </xs:sequence>
        <xs:attribute fixed="not" name="relation">
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="not"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:complexType>
    <xs:complexType name="expressionDuality">
        <xs:sequence>
            <xs:group maxOccurs="2" minOccurs="2" ref="expression"/>
        </xs:sequence>
        <xs:attribute default="and" name="relation">
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="and"/>
                    <xs:enumeration value="or"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:complexType>
    <xs:group name="expression">
        <xs:choice>
            <xs:element name="expressionUnitary" type="expressionUnitary"/>
            <xs:element name="expressionDuality" type="expressionDuality"/>
            <xs:element name="conditionUnitary" type="conditionUnitary"/>
            <xs:element name="conditionDuality" type="conditionDuality"/>
        </xs:choice>
    </xs:group>
    <xs:group name="action">
        <xs:sequence>
            <xs:group ref="expression"/>
            <xs:element name="program" type="program"/>
        </xs:sequence>
    </xs:group>
    <xs:complexType name="if">
        <xs:complexContent>
            <xs:extension base="base">
                <xs:sequence>
                    <xs:element minOccurs="0" name="dataBlock"
                                type="dataBlock"/>
                    <xs:group maxOccurs="unbounded" ref="action"/>
                    <xs:element minOccurs="0" name="program" type="program"/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:complexType name="while">
        <xs:complexContent>
            <xs:extension base="base">
                <xs:sequence>
                    <xs:element minOccurs="0" name="dataBlock"
                                type="dataBlock"/>
                    <xs:group ref="expression"/>
                    <xs:element name="processBlock" type="processBlock"/>
                </xs:sequence>
                <xs:attribute default="head" name="position">
                    <xs:simpleType>
                        <xs:restriction base="xs:string">
                            <xs:enumeration value="head"/>
                            <xs:enumeration value="foot"/>
                        </xs:restriction>
                    </xs:simpleType>
                </xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:complexType name="continue">
        <xs:annotation>
            <xs:documentation>
                Stop special operator, like while, make no sense for other
                operator.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="base"/>
        </xs:complexContent>
    </xs:complexType>
    <xs:complexType name="break">
        <xs:annotation>
            <xs:documentation>
                Stop the nearest operator, like while, make no sense for other
                operator.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="base"/>
        </xs:complexContent>
    </xs:complexType>
    <xs:complexType name="block">
        <xs:annotation>
            <xs:documentation>Stop the top operator.</xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="base"/>
        </xs:complexContent>
    </xs:complexType>
    <!-- ****************************************************************************************************-->
    <xs:complexType name="send">
        <xs:complexContent>
            <xs:extension base="base">
                <xs:sequence>
                    <xs:element maxOccurs="unbounded" minOccurs="0"
                                name="fieldVariable">
                        <xs:complexType>
                            <xs:sequence>
                                <xs:group ref="parameterVariable"/>
                            </xs:sequence>
                            <xs:attribute name="fieldName"
                                          type="referenceName" use="required"/>
                        </xs:complexType>
                    </xs:element>
                    <xs:group maxOccurs="2" minOccurs="0"
                              ref="parameterVariable">
                        <xs:annotation>
                            <xs:documentation>
                                If there is none, it&apos;s the current
                                Interface or current remote ip and port.
                                If there is only one element, it&apos;s TCP
                                Interface.
                                If there are two element,
                                First: Ip.
                                Second: Port.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:group>
                </xs:sequence>
                <xs:attribute name="protocol" type="referenceName"
                              use="required"/>
                <xs:attribute name="pdu" type="referenceName" use="required"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:complexType name="forward">
        <xs:complexContent>
            <xs:extension base="base">
                <xs:sequence>
                    <xs:group maxOccurs="2" minOccurs="0"
                              ref="parameterVariable">
                        <xs:annotation>
                            <xs:documentation>
                                If there is none, it&apos;s the
                                current Interface.
                                If there is only one element, it&apos;s TCP
                                Interface.
                                If thiere are two element,
                                First: Ip.
                                Second: Port.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:group>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <!-- ****************************************************************************************************-->
    <xs:complexType name="getAddress">
        <xs:complexContent>
            <xs:extension base="base">
                <xs:sequence>
                    <xs:group maxOccurs="2" minOccurs="2"
                              ref="parameterVariable">
                        <xs:annotation>
                            <xs:documentation>
                                First: IP.
                                Second: Port.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:group>
                </xs:sequence>
                <xs:attribute default="remote" name="type">
                    <xs:simpleType>
                        <xs:restriction base="xs:string">
                            <xs:enumeration value="remote"/>
                            <xs:enumeration value="local"/>
                        </xs:restriction>
                    </xs:simpleType>
                </xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <!-- ****************************************************************************************************-->
    <xs:complexType name="register">
        <xs:complexContent>
            <xs:extension base="base">
                <xs:sequence>
                    <xs:group maxOccurs="3" minOccurs="2"
                              ref="parameterVariable">
                        <xs:annotation>
                            <xs:documentation>
                                First: Category, must be string.
                                Second: Key, must be string.
                                Third: Value.If is&apos;s not exist, register
                                the current interface.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:group>
                </xs:sequence>
                <xs:attribute default="false" name="recovered"
                              type="xs:boolean"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:complexType name="unregister">
        <xs:annotation>
            <xs:documentation/>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="base">
                <xs:sequence>
                    <xs:group maxOccurs="2" minOccurs="2"
                              ref="parameterVariable">
                        <xs:annotation>
                            <xs:documentation>
                                First: Category, must be string.
                                Second: Key, must be string.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:group>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:complexType name="search">
        <xs:complexContent>
            <xs:extension base="base">
                <xs:sequence>
                    <xs:group maxOccurs="3" minOccurs="3"
                              ref="parameterVariable">
                        <xs:annotation>
                            <xs:documentation>
                                First: Category, must be string.
                                Second: Key, must be string.
                                Third: Value.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:group>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <!-- ****************************************************************************************************-->
    <xs:complexType name="getUsage">
        <xs:complexContent>
            <xs:extension base="base">
                <xs:sequence>
                    <xs:group maxOccurs="1" minOccurs="1"
                              ref="parameterVariable">
                        <xs:annotation>
                            <xs:documentation>
                                First: Return usage
                            </xs:documentation>
                        </xs:annotation>
                    </xs:group>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <!-- ****************************************************************************************************-->
    <xs:complexType name="networkWakeUp">
        <xs:complexContent>
            <xs:extension base="base">
                <xs:sequence>
                    <xs:group maxOccurs="2" minOccurs="2"
                              ref="parameterVariable">
                        <xs:annotation>
                            <xs:documentation>
                                First: interface name, must be string.
                                Second: return create result, maybe success,
                                maybe failure.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:group>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:complexType name="networkSleep">
        <xs:complexContent>
            <xs:extension base="base">
                <xs:sequence>
                    <xs:group maxOccurs="2" minOccurs="2"
                              ref="parameterVariable">
                        <xs:annotation>
                            <xs:documentation>
                                First: interface name, must be string.
                                Second: return destroy result, maybe success,
                                maybe failure.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:group>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <!-- ****************************************************************************************************-->
    <xs:complexType name="readFile">
        <xs:complexContent>
            <xs:extension base="base">
                <xs:sequence>
                    <xs:group maxOccurs="3" minOccurs="3"
                              ref="parameterVariable">
                        <xs:annotation>
                            <xs:documentation>
                                First: File Folder
                                Second: File Name
                                Third: File content, null_v if failure
                            </xs:documentation>
                        </xs:annotation>
                    </xs:group>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:complexType name="saveFile">
        <xs:complexContent>
            <xs:extension base="base">
                <xs:sequence>
                    <xs:group maxOccurs="4" minOccurs="4"
                              ref="parameterVariable">
                        <xs:annotation>
                            <xs:documentation>
                                First: File Folder
                                Second: File Name
                                Third: File content
                                Forth: Result, true_v or false_v
                            </xs:documentation>
                        </xs:annotation>
                    </xs:group>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:complexType name="deleteFile">
        <xs:complexContent>
            <xs:extension base="base">
                <xs:sequence>
                    <xs:group maxOccurs="2" minOccurs="2"
                              ref="parameterVariable">
                        <xs:annotation>
                            <xs:documentation>
                                First: File Folder or File name
                                Second: Result, true_v or false_v
                            </xs:documentation>
                        </xs:annotation>
                    </xs:group>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <!-- ****************************************************************************************************-->
    <xs:complexType name="useModule">
        <xs:complexContent>
            <xs:extension base="base">
                <xs:sequence>
                    <xs:element minOccurs="0" name="parameterIn">
                        <xs:complexType>
                            <xs:group maxOccurs="unbounded"
                                      ref="parameterVariable"/>
                        </xs:complexType>
                    </xs:element>
                    <xs:element maxOccurs="unbounded" minOccurs="0"
                                name="parameterOut">
                        <xs:complexType>
                            <xs:sequence>
                                <xs:group ref="parameterVariable"/>
                            </xs:sequence>
                            <xs:attribute name="fieldName"
                                          type="referenceName" use="required"/>
                        </xs:complexType>
                    </xs:element>
                </xs:sequence>
                <xs:attribute name="module" type="referenceName"
                              use="required"/>
                <xs:attribute name="interface" type="referenceName"
                              use="required"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <!-- ****************************************************************************************************-->
    <xs:complexType name="split">
        <xs:complexContent>
            <xs:extension base="base">
                <xs:sequence>
                    <xs:group maxOccurs="2" minOccurs="2"
                              ref="parameterVariable">
                        <xs:annotation>
                            <xs:documentation>
                                First: Environment folder
                                Second: Result, true_v or false_v
                            </xs:documentation>
                        </xs:annotation>
                    </xs:group>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <!-- ****************************************************************************************************-->
    <xs:complexType name="die">
        <xs:annotation>
            <xs:documentation>ComEgg die</xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="base"/>
        </xs:complexContent>
    </xs:complexType>
    <!-- ****************************************************************************************************-->
    <xs:complexType name="processBlock">
        <xs:choice maxOccurs="unbounded">
            <xs:element name="empty" type="empty"/>
            <xs:element name="unitaryCalculate" type="unitaryCalculate"/>
            <xs:element name="dualityCalculate" type="dualityCalculate"/>
            <xs:element name="configGroup" type="configGroup"/>
            <xs:element name="if" type="if"/>
            <xs:element name="while" type="while"/>
            <xs:element name="continue" type="continue"/>
            <xs:element name="block" type="block"/>
            <xs:element name="break" type="break"/>
            <xs:element name="send" type="send"/>
            <xs:element name="forward" type="forward"/>
            <xs:element name="getAddress" type="getAddress"/>
            <xs:element name="register" type="register"/>
            <xs:element name="unregister" type="unregister"/>
            <xs:element name="search" type="search"/>
            <xs:element name="getUsage" type="getUsage"/>
            <xs:element name="networkWakeUp" type="networkWakeUp"/>
            <xs:element name="networkSleep" type="networkSleep"/>
            <xs:element name="readFile" type="readFile"/>
            <xs:element name="saveFile" type="saveFile"/>
            <xs:element name="deleteFile" type="deleteFile"/>
            <xs:element name="useModule" type="useModule"/>
            <xs:element name="split" type="split"/>
            <xs:element name="die" type="die"/>
            <xs:element name="program" type="program"/>
        </xs:choice>
    </xs:complexType>
    <xs:complexType name="program">
        <xs:sequence>
            <xs:element minOccurs="0" name="dataBlock" type="dataBlock"/>
            <xs:element name="processBlock" type="processBlock"/>
        </xs:sequence>
    </xs:complexType>
</xs:schema>
