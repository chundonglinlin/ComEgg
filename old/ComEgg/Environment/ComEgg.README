version 0.2.0
================

+++ 通过协议传送文件 +++

ComEgg可以读取指定的文件，然后把这些文件作为PDU传送给其他ComEgg。比如：在管理层实现的复制和分裂，需要转移XML表示的业务文件。在新的执行单位里面，复制的或者分裂的ComEgg需要执行这些文件。

+++ 在文件中保存传输的内容为文件 +++

ComEgg在接受到通过PDU传送来的文件之后，应该可以把这些文件保存在指定的文件夹中。比如：分裂ComEgg的时候，就可以指定这个文件夹为其环境。

+++ 删除文件 +++

ComEgg可以删除指定文件夹内的所有内容。比如：管理ComEgg发现其管理的业务ComEgg空运转的时候，就可以让其死亡，并且删除其环境。

+++ 复制/分裂 +++

一个ComEgg可以在给定执行的基因，然后启动一个新的ComEgg，让其在相同、或者不相同的环境中运行。分裂可以直接在ComEgg层上的一个执行但愿进行，另外复制和分裂在管理曾层，也可以通过对ComEgg业务的开发在多个执行单元上来实现。环境要指定复制和分裂的最大次数。每个ComEgg都要可以保存从父ComEgg传来的数据，这个也是通过管理层来实现。

+++ 成长/变异 +++

ComEgg可以在运行当中转变其应用，这里的实现，主要通过4种接口的动态创建和销毁，创建和销毁对应的transaction。在本版本中，不做更大范围的变化，而是保留在环境内变化，这样效率更高，而且更加可控。这种叫做成长。

在管理层，可以实现真正的变异，也就是改变环境，ComEgg可以和原来完全不一样。其实每次变换业务的时候，管理层就发生变异，而在ComEgg层发现的无非是死亡和重新在新的环境中启动

［＊＊］可以在后续版本中实现更多的变化，比如动态的加载环境等。如果按照这种方式，每次变异的阶段，整个ComEgg效率会降低。

+++ 死亡 +++

一个ComEgg可以自己杀死自己，也可以杀死自己的ComEgg。

+++ 增加得到当前单元的计算能力 +++

返回当前单元执行体的计算能力占用百分比，这个在以后可以提精，这个阶段使用内存的占用量为返回值。

*** 第三方模块 ***

整个环境作基于面向问题语言和XML，如果都使用XML，那么很多细节描述起来就很麻烦，而且效率不高。这里我们可以支持第三方技术开发的模块，比如C/C++或者Java等。这里的模块作为环境中的一个算子，就是一个operator。

这里的实现，先支持C/C++的so模块。

其在多机器之间复制等操作，暂时就使用我们前面定义的文件通过协议传送的操作来实现。

这个模块非常重要，可以让ComEgg支持任何操作

*** 变量操作的升级 ***
主要支持普通变量，包括数字和字符串，还支持数组变量。所有数组操作的前提都建立在数组的内存已经明确分配。
数字：网络读、写，会话读、写
字符串：网络读、写，会话读、写
数组：网络整体读、字段读、整体写、字段写；会话整体读、字段读、会话整体写、字段写。

version 0.1.0
================

可以在Windows运行，经过了一定的测试
可以在Linux上运行，没有经过充分测试

不支持双字节的Unicode；
不支持字符串类型的协议，如HTTP等；
不支持XML类型的协议，如SOAP等；
不支持IP层协议；

暂时不支持超过65535字节大小以上的数据包；
暂时不支持数据库连接；
暂时不支持外部模块连接；
暂时不支持协议之间的完全转换，指的是不支持有Group字段的消息体转换；
暂时不完全支持会话；
暂时没有正常关闭功能；
暂时没有定时器功能；
暂时在协议定义中没有常数；

可以在TCP和UDP协议上对消息进行交换和路由；通过group类型，支持变长PDU，但是变长PDU中不能有变长PDU；
对于网络协议PDU，Command ID字段必须是v_unsigned_normal类型；
任何表示Size的字段，都必须是v_unsigned_normal类型；
每个Group单元长度是一定的，这要求Group的子元素没有变长的Size以及Group中没有Group子元素；
pdu_exchange操作需要保证PDU中没有Group字段；
支持各种运算符，各种运算符都不可以直接使用常数，如果需要使用，应该先定义常数变量，这样就有了类型安全；
支持协议栈的自动化，并且协议内容可以直接作为逻辑操作的因子。
